# Changelog

## Version 0.6.1
- Removed the requirement for the `endif` keyword in conditional expressions.
- Enhanced the lexer and parser to allow more flexible use of newlines. Not only blocks, but group and vector literals now allow newlines.

## Version 0.6.0
- Introduced the arrow operator (`->`) as syntactic sugar for chained function calls. Expressions like  
  ```
  A -> f(arg1, arg2)
  ```  
  are transformed to  
  ```
  f(A, arg1, arg2)
  ```  
  and support chaining such as  
  ```
  A -> f -> g(arg)
  ```  
  which becomes  
  ```
  g(f(A), arg)
  ```

- Added a new lazy-evaluated sequence data type (`seq`). This type extends vector functionality by allowing operations like `map` and `filter` to return a sequence, and includes a `collect(seq)` function to convert a sequence into a vector.

## Version 0.5.0
New core functions are now available:
- `map(vector, lambda)` – Applies a function to each element in a vector.
- `filter(vector, lambda)` – Returns a new vector with elements that satisfy the lambda condition.
- `reduce(vector, lambda)` – Combines vector elements into a single value using the lambda function.
- `sum(vector)` – Calculates the total of all elements in a vector.
- `all(vector, lambda)` – Checks if all elements match the lambda condition.
- `any(vector, lambda)` – Verifies if at least one element meets the lambda condition.

Additionally:
- Enhanced performance with an optimization mechanism to reduce redundant computations.
- Updated core library documentation with comprehensive usage guidelines.
- Refactored the interpreter for clearer error messages and easier debugging.
- Improved documentation examples for smoother feature adoption.

## Version 0.4.0
- Added support for comparison operators (==, !=, <, <=, >, >=).
- Implemented conditional expressions (if, else, elif, endif).
- Added support for boolean literals (true, false).
- Implemented logical operators (&, |) with short-circuit evaluation.
- Added support for recursive functions and examples.
- Added local keyword to declare variables in the current scope.

## Version 0.3.0
- Added support for vectors and operations over vectors.
- Enabled native functions (host language functions) to access interpreter capabilities.
- Core library add the following native functions:
  - `vec(size, generator)` - Creates a vector of `size` elements using the `generator` function.
  - `dot(a, b)` - Calculates the dot product of vectors `a` and `b`.
  - `nth(a, index)` - Returns the element at `index` in vector `a`.
  - `first(a)` - Returns the first element of vector `a`.
  - `last(a)` - Returns the last element of vector `a`.

## Version 0.2.0
- Introduced lambda expressions (user-defined functions) and environments.
- Functions are first-class citizens and can be assigned to variables.

## Version 0.1.0
- Implemented core arithmetic operations (+, -, *, /, ^).
- Added support for native function calls.
- core library consist on:
  - `exit()` - Exits the program.
  - `pow(a, b)` - Raises `a` to the power of `b`.
  - `sqrt(a)` - Returns the square root of `a`.
  - `floor(a)` - Returns the floor of `a`.
  - `ceil(a)` - Returns the ceiling of `a`.
  - `round(a)` - Rounds `a` to the nearest integer.
