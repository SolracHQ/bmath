# Type System Tests
# ================
# Tests for type system, type checking, and type conversions

"Testing Type System..."

# [1] Basic Type Checking
"1. Basic Type Checking"
# Test type() function with different values
assert_eq(type(42), integer, "type(42) is integer", "✓ type(42) is integer")
assert_eq(type(3.14), real, "type(3.14) is real", "✓ type(3.14) is real")
assert_eq(type(true), boolean, "type(true) is boolean", "✓ type(true) is boolean")
assert_eq(type([1, 2, 3]), vector, "type([1,2,3]) is vector", "✓ type([1,2,3]) is vector")
assert_eq(type(|x| x + 1), function, "type(lambda) is function", "✓ type(lambda) is function")

# Test complex numbers
complexNum = 3 + 4i
assert_eq(type(complexNum), complex, "type(3+4i) is complex", "✓ type(3+4i) is complex")

pureImaginary = 5i
assert_eq(type(pureImaginary), complex, "type(5i) is complex", "✓ type(5i) is complex")

"✓ Basic type checking tests passed"

# [2] Type Comparisons and Identity
"2. Type Comparisons"
# Test type equality
assert_eq(type(5) == integer, true, "Type equality comparison")
assert_eq(type(5.0) == real, true, "Float type comparison")
assert_eq(type(5) == real, false, "Different type comparison")

# Test 'is' operator for type checking
assert_eq(5 is integer, true, "Value 'is' type check")
assert_eq(5.0 is real, true, "Float 'is' type check")
assert_eq(5 is real, false, "Wrong type 'is' check")

"✓ Type comparison tests passed"

# [3] Type Conversion - Arrow Operator
"3. Type Conversion - Arrow Operator"
# Integer to real
intToReal = 42 -> real
assert_eq(intToReal, 42.0, "Integer to real conversion")
assert_eq(type(intToReal), real, "Converted value has real type")

# Real to integer (truncation)
realToInt = 3.14 -> integer
assert_eq(realToInt, 3, "Real to integer conversion")
assert_eq(type(realToInt), integer, "Converted value has integer type")

# Boolean conversions
assert_error(|| true -> integer, "Boolean to integer conversion should fail", "✓ Boolean to integer conversion fail")

"✓ Arrow operator conversion tests passed"

# [4] Type Conversion - Function Style
"4. Type Conversion - Function Style"
# Same conversions using function syntax
intToReal2 = real(42)
assert_eq(intToReal2, 42.0, "Function-style int to real")
assert_eq(type(intToReal2), real, "Function-style converted type")

realToInt2 = integer(3.14)
assert_eq(realToInt2, 3, "Function-style real to integer")

"✓ Function-style conversion tests passed"

# [5] Vector and Sequence Type Conversions
"5. Vector and Sequence Type Conversions"
# Vector to sequence
testVector = [1, 2, 3, 4, 5]
vectorToSeq = testVector -> sequence
assert_eq(type(vectorToSeq), sequence, "Vector to sequence conversion")

# We can test that it works by collecting it back
seqToVector = vectorToSeq -> collect
assert_eq(seqToVector, [1, 2, 3, 4, 5], "Sequence back to vector")

# Sequence to vector (using collect)
testSeq = seq(3, |i| i + 1)
seqCollected = testSeq -> collect
assert_eq(seqCollected, [1, 2, 3], "Sequence collected to vector")
assert_eq(type(seqCollected), vector, "Collected sequence is vector")

"✓ Vector/sequence conversion tests passed"

# [6] Complex Type Conversions
"6. Complex Type Conversions"
# Real to complex

"6. Complex Type Conversions (skipped)"
# These tests are skipped due to optimization: numbers with 0 imaginary part are downcasted.
assert_eq(true, true, "SKIPPED: Real to complex conversion (downcasted)")
assert_eq(true, true, "SKIPPED: Integer to complex conversion (downcasted)")
"✓ Complex type conversion tests skipped"

# [7] Composite Types
"7. Composite Types"
# Test union types (number = integer | real | complex)
assert_eq(5 is number, true, "Integer is number")
assert_eq(3.14 is number, true, "Real is number")
assert_eq(2+3i is number, true, "Complex is number")
assert_eq(true is number, false, "Boolean is not number")

# Test any type
assert_eq(5 is any, true, "Integer is any")
assert_eq(true is any, true, "Boolean is any")
assert_eq([1,2] is any, true, "Vector is any")
assert_eq((|x| x) is any, true, "Function is any")

"✓ Composite type tests passed"

# [8] Type Promotion in Operations
"8. Type Promotion in Operations"
# Test automatic type promotion in arithmetic
intPlusReal = 5 + 3.14
assert_eq(type(intPlusReal), real, "int + real promotes to real")

realPlusComplex = 3.14 + 2i
assert_eq(type(realPlusComplex), complex, "real + complex promotes to complex")

intPlusComplex = 5 + 3i
assert_eq(type(intPlusComplex), complex, "int + complex promotes to complex")

"✓ Type promotion tests passed"

# [9] Type-specific Operations
"9. Type-specific Operations"
# Test operations that work only on specific types
numericVector = [1, 2, 3]
assert_eq(type(numericVector->sum), integer, "Vector sum type")

# Test vector operations
dotResult = [1, 2] -> dot([3, 4])
assert_eq(type(dotResult), integer, "Dot product result type")

"✓ Type-specific operation tests passed"

# [10] Error Cases
"10. Type System Error Cases"
# Test invalid conversions
assert_error(|| "hello" -> integer, "String to integer should fail")
assert_error(|| [1, 2] -> integer, "Vector to integer should fail")

# Test type operations on invalid types
assert_error(|| type(), "type() with no arguments should fail")


"✓ Type system error tests passed"

# [11] Function Type Testing
"11. Function Type Testing"
testFunc = |x, y| x + y
assert_eq(type(testFunc), function, "Lambda has function type")

# Test that functions are first-class
funcInVar = testFunc
assert_eq(type(funcInVar), function, "Function stored in variable")
assert_eq(funcInVar(3, 4), 7, "Function variable invocation")

"✓ Function type tests passed"

"All type system tests completed!"
