# Function Definition and Usage Tests
# ==================================
# Tests for function definition, invocation, and advanced features

"Testing Functions..."

# [1] Basic Function Definition
"1. Basic Function Definition"
# Simple function
add = |a, b| a + b
assert_eq(add(5, 3), 8, "Simple addition function", "✓ Simple addition function")

# Function without parameters
getPI = || 3.14159
assert_eq(getPI(), 3.14159, "Function without parameters", "✓ Function without parameters")

# Single parameter function
square = |x| x * x
assert_eq(square(5), 25, "Single parameter function", "✓ Single parameter function")

"✓ Basic function definition tests passed"

# [2] Lambda Functions and Inline Usage
"2. Lambda Functions and Inline Usage"
# Inline lambda
inlineResult = (|x| x * 2)(5)
assert_eq(inlineResult, 10, "Inline lambda execution", "✓ Inline lambda execution")

# Lambda assigned to variable
doubler = |x| x * 2
assert_eq(doubler(7), 14, "Lambda assigned to variable", "✓ Lambda assigned to variable")

# Multiple lambdas
cube = |x| x ^ 3
assert_eq(cube(3), 27, "Cube function", "✓ Cube function")

"✓ Lambda function tests passed"

# [3] Higher-Order Functions
"3. Higher-Order Functions"
# Function that takes a function as parameter
applyTwice = |f, x| f(f(x))
doubleSquared = applyTwice(|x| x * 2, 3)
assert_eq(doubleSquared, 12, "Function taking function parameter", "✓ Function taking function parameter")

# Function that returns a function
makeMultiplier = |factor| |x| x * factor
doubler2 = makeMultiplier(2)
tripler = makeMultiplier(3)
assert_eq(doubler2(7), 14, "Function returning function - doubler", "✓ Function returning doubler")
assert_eq(tripler(7), 21, "Function returning function - tripler", "✓ Function returning tripler")

"✓ Higher-order function tests passed"

# [4] Recursive Functions
"4. Recursive Functions"
# Factorial
factorial = |n| if(n <= 1) 1 else n * factorial(n - 1)
assert_eq(factorial(0), 1, "Factorial of 0", "✓ Factorial 0")
assert_eq(factorial(1), 1, "Factorial of 1", "✓ Factorial 1")
assert_eq(factorial(5), 120, "Factorial of 5", "✓ Factorial 5")

# Fibonacci
fibonacci = |n| if(n <= 1) n else fibonacci(n-1) + fibonacci(n-2)
assert_eq(fibonacci(0), 0, "Fibonacci of 0", "✓ Fibonacci 0")
assert_eq(fibonacci(1), 1, "Fibonacci of 1", "✓ Fibonacci 1")
assert_eq(fibonacci(6), 8, "Fibonacci of 6", "✓ Fibonacci 6")

"✓ Recursive function tests passed"

# [5] Functions with Block Bodies
"5. Functions with Block Bodies"
complexFunction = |x, y| {
  local sum = x + y
  local product = x * y
  if(sum > product) sum else product
}
assert_eq(complexFunction(3, 4), 12, "Complex function with block body", "✓ Complex block body")

# Function with multiple local variables
calculator = |a, b, op| {
  local result = 0
  if(op == "add") {
    result = a + b
  } elif(op == "mul") {
    result = a * b
  } else {
    result = -1
  }
  result
}
assert_eq(calculator(5, 3, "add"), 8, "Calculator function - addition", "✓ Calculator addition")
assert_eq(calculator(5, 3, "mul"), 15, "Calculator function - multiplication", "✓ Calculator multiplication")

"✓ Block body function tests passed"

# [6] Closures and Environment Capture
"6. Closures and Environment Capture"
# Simple closure
outerVar = 10
closure = |x| x + outerVar
assert_eq(closure(5), 15, "Simple closure capturing outer variable")

# Closure factory
makeAdder = |increment| |x| x + increment
add5 = makeAdder(5)
add10 = makeAdder(10)
assert_eq(add5(3), 8, "Closure factory - add5")
assert_eq(add10(3), 13, "Closure factory - add10")

"✓ Closure tests passed"

# [7] Function Composition
"7. Function Composition"
addOne = |x| x + 1
multiplyByTwo = |x| x * 2

# Manual composition
composed = |x| multiplyByTwo(addOne(x))
assert_eq(composed(5), 12, "Manual function composition")

# Chain of operations
result = 5
result = addOne(result)    # 6
result = multiplyByTwo(result)  # 12
assert_eq(result, 12, "Sequential function application")

"✓ Function composition tests passed"

# [8] Advanced Recursive Patterns
"8. Advanced Recursive Patterns"
# Mutual recursion
isEven = |n| if(n == 0) true else isOdd(n - 1)
isOdd = |n| if(n == 0) false else isEven(n - 1)

assert_eq(isEven(4), true, "Mutual recursion - even number")
assert_eq(isOdd(4), false, "Mutual recursion - odd test on even")
assert_eq(isEven(7), false, "Mutual recursion - even test on odd")
assert_eq(isOdd(7), true, "Mutual recursion - odd number")

# Tree recursion (binomial coefficient)
binomial = |n, k| {
  if(k == 0 | k == n) 1
  else binomial(n-1, k-1) + binomial(n-1, k)
}
assert_eq(binomial(5, 2), 10, "Tree recursion - binomial coefficient")

"✓ Advanced recursive pattern tests passed"

# [9] Error Cases with Functions
"9. Function Error Cases"
# Test calling non-function
assert_error(|| {
  notAFunction = 42
  notAFunction(5)
}, "Calling non-function should raise error")

# Test wrong number of arguments
assert_error(|| add(5), "Too few arguments should raise error")
assert_error(|| add(5, 3, 7), "Too many arguments should raise error")

# Test undefined function
assert_error(|| undefinedFunc(), "Calling undefined function should raise error")

"✓ Function error tests passed"

"All function tests completed!"
