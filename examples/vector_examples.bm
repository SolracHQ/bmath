# Vector Operations Examples
# =========================
# This file demonstrates various vector operations in BMath language.

# [1] Vector Creation
# -----------------
# Creating vectors with literals
intVector = [1, 2, 3, 4, 5]             # A vector of integers
floatVector = [1.1, 2.2, 3.3, 4.4, 5.5] # A vector of floats
mixedVector = [1, 2.5, 3, 4.5]          # A mixed vector
emptyVector = []                        # An empty vector

# Creating vectors with the vec function
zerosVector = vec(5, 0)               # [0, 0, 0, 0, 0]
onesVector = vec(3, 1)                # [1, 1, 1]

# Creating a vector using a generator function
indexVector = vec(5, |i| i + 1)        # [1, 2, 3, 4, 5]
squaresVector = vec(5, |i| i^2)        # [0, 1, 4, 9, 16]

# [2] Vector Access and Information
# -------------------------------
# Getting vector length
vectorLength = len(intVector)          # Expected: 5

# Accessing elements
firstElement = first(intVector)        # Expected: 1
lastElement = last(intVector)          # Expected: 5
thirdElement = nth(intVector, 2)       # Expected: 3 (0-based indexing)

# [3] Element-wise Arithmetic
# -------------------------
vectorA = [1, 2, 3]
vectorB = [4, 5, 6]

# Addition and subtraction
vectorSum = vectorA + vectorB         # Expected: [5, 7, 9]
vectorDiff = vectorB - vectorA        # Expected: [3, 3, 3]

# Scalar operations
doubledVector = 2 * vectorA           # Expected: [2, 4, 6]
halvedVector = vectorB / 2            # Expected: [2.0, 2.5, 3.0]
poweredVector = vectorA ^ 2           # Expected: [1, 4, 9]

# [4] Vector Products
# ----------------
# Dot product
dotProduct = dot(vectorA, vectorB)    # Expected: 32 (1*4 + 2*5 + 3*6)

# [5] Vector Operations with Mixed Types
# -----------------------------------
intAndFloatVector = intVector + floatVector  # Type promotion to float
                                           # Only first 3 elements are added

# [6] Higher-Order Functions with Vectors
# ------------------------------------
# Map: Apply a function to each element
mappedVector = map(intVector, |x| x * 2)    # Expected: [2, 4, 6, 8, 10]

# Filter: Select elements that satisfy a predicate
evenNumbers = filter(intVector, |x| x % 2 == 0)  # Expected: [2, 4]

# Reduce: Combine elements using a binary function
vectorSum = reduce(intVector, 0, |acc, x| acc + x)  # Expected: 15

# [7] Chaining Operations with Arrow Operator
# ----------------------------------------
processedVector = intVector -> \
                 map(|x| x * 2) -> \
                 filter(|x| x > 5) # Expected: [6, 8, 10]

# [8] Complex Number Vectors
# -----------------------
complexVector = [3+4i, 1-2i, 5i]
complexVectorSum = sum(complexVector)   # Expected: 4+7i

# [9] Boolean Vector Operations
# --------------------------
boolVector1 = [true, true, false]
boolVector2 = [true, false, false]

anyTrueResult = any(boolVector1)     # Expected: true
allTrueResult = all(boolVector1)     # Expected: false
allFalseResult = all([false, false, false])  # Expected: false

# [10] Nested Vectors
# ----------------
nestedVector = [[1, 2], [3, 4], [5, 6]]
firstInnerVector = first(nestedVector)  # Expected: [1, 2]

# [11] Vector Manipulation Functions
# --------------------------------
# Merge: Combine two vectors into one
vector1 = [1, 2, 3]
vector2 = [4, 5, 6]
mergedVector = merge(vector1, vector2)  # Expected: [1, 2, 3, 4, 5, 6]

# Slice: Extract a portion of a vector
numbers = [10, 20, 30, 40, 50]
firstThree = slice(numbers, 3)          # Expected: [10, 20, 30]
middleSlice = slice(numbers, 1, 4)      # Expected: [20, 30, 40]