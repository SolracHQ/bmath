# Sequence Operations Examples
# ============================

# [1] Fibonacci Sequence
# Generates a Fibonacci sequence of length n.
fibSeq = |n| {
  a = 0
  b = 1
  seq(n, |i| {
    tmp = b
    b = a + b
    a = tmp
  })
}

# Accessing a specific element with skip:
fib10 = fibSeq(10)->skip(9)   # Expected: 55 (10th Fibonacci number)
fib20 = fibSeq(20)->skip(19)  # Gets the 20th Fibonacci number

# [2] Transforming the Fibonacci Sequence
# Compute the square of the 11th Fibonacci number using map and skip.
fib11_square = fibSeq(11)->map(|x| x * x)->skip(10)  # Expected: (11th Fibonacci)^2

# [3] Factorial Sequence
# Generates a sequence of factorial values for numbers 1 up to n.
factorialSeq = |n| {
  a = 1
  seq(n, |i| {
    a = a * (i + 1)
  })
}

fact10 = factorialSeq(10)->skip(9)      # Expected: 3628800 (10!)
fact10sum = factorialSeq(10)->sum()      # Sum of factorials from 1! to 10!

# [4] Filtering and Reducing a Sequence
# Create a sequence of numbers from 1 to 20, filter even numbers, and then sum them.
numSeq = seq(20, |i| i + 1)               # Sequence: 1, 2, ..., 20
evenSeq = filter(numSeq, |x| (x % 2) == 0)  # Filter: only even numbers
sumEven = evenSeq->sum()                   # Expected: sum of even numbers between 1 and 20

# [5] Chaining Operations with Collection
# Chain operations on a sequence and collect the results into a concrete vector.
collectedSquares = fibSeq(12) \
                   -> map(|x| x * x) \       # Square each Fibonacci number
                   -> filter(|x| x > 50) \     # Keep only squares greater than 50
                   -> collect               # Convert the lazy sequence into a vector