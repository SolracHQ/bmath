# Function Examples in Math CLI Language
# =======================================
# This file demonstrates functions in the math CLI language.
# It covers basic function definitions, higher-order functions, recursion,
# first-class functions, inline lambdas and composition.

# [1] Basic Function Definition and Invocation
# ----------------------------------------------
# Define a function that adds two numbers.
addFunction = |x, y| x + y
resultAdd = addFunction(5, 3)  # Expected output: 8

# [2] Higher-Order Functions
# --------------------------
# Define a higher-order function that applies a given function to a number.
applyFunction = |fn, num| fn(num)
squareFunction = |x| x ^ 2
resultSquare = applyFunction(squareFunction, 5)  # Expected output: 25

# [3] Function Returning Another Function
# -----------------------------------------
# Define a function that returns an adder function, which adds a specific increment.
makeAdder = |increment| |x| x + increment
addFive = makeAdder(5)
resultAddFive = addFive(10)  # Expected output: 15

# [4] Recursive Function Example
# -------------------------------
# Calculate the factorial of a number using recursion.
factorialFunction = |n| if (n == 0) 1 else n * factorialFunction(n - 1)
factorialOfFive = factorialFunction(5)  # Expected output: 120

# [5] Using Functions as First-Class Citizens
# -------------------------------------------
# Define a function that applies another function to each element of a list.
applyToList = |fn, list| vec(len(list), |i| fn(nth(list, i)))
numbers = [1, 2, 3, 4]
squaredNumbers = applyToList(squareFunction, numbers)  # Expected output: [1, 4, 9, 16]

# [6] Inline Lambda Invocation
# ----------------------------
# Use an inline lambda to compute the cube of a number.
cubeResult = (|x| x ^ 3)(3)  # Expected output: 27

# [7] Function Composition
# ------------------------
# Compose two functions: one doubles a number, then adds three.
doubleFunction = |x| x * 2
addThreeFunction = |x| x + 3
composeFunctions = |x| addThreeFunction(doubleFunction(x))
resultCompose = composeFunctions(4)  # Expected output: 11