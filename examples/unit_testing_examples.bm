# Unit Testing Examples with Assertions
# ====================================
# This file shows how to use assertion functions for unit testing in BMath.

# [1] Testing a Factorial Function
# -------------------------------
factorial = |n| {
  if(n <= 1) 
    1 
  else 
    n * factorial(n - 1)
}

# Test cases for factorial
assert_eq(factorial(0), 1, "factorial(0) should be 1")
assert_eq(factorial(1), 1, "factorial(1) should be 1")
assert_eq(factorial(5), 120, "factorial(5) should be 120")
assert_eq(factorial(6), 720, "factorial(6) should be 720")

"✓ Factorial function tests passed"

# [2] Testing a Fibonacci Function
# -------------------------------
fibonacci = |n| {
  if(n <= 1)
    n
  else
    fibonacci(n - 1) + fibonacci(n - 2)
}

# Test cases for fibonacci
assert_eq(fibonacci(0), 0, "fibonacci(0) should be 0")
assert_eq(fibonacci(1), 1, "fibonacci(1) should be 1")
assert_eq(fibonacci(2), 1, "fibonacci(2) should be 1")
assert_eq(fibonacci(3), 2, "fibonacci(3) should be 2")
assert_eq(fibonacci(5), 5, "fibonacci(5) should be 5")
assert_eq(fibonacci(8), 21, "fibonacci(8) should be 21")

"✓ Fibonacci function tests passed"

# [3] Testing Vector Utility Functions
# -----------------------------------
vectorSum = |vec| {
  local total = 0
  local i = 0
  # Simple loop simulation using recursion
  sumHelper = |index, acc| {
    if(index >= len(vec))
      acc
    else
      sumHelper(index + 1, acc + nth(vec, index))
  }
  sumHelper(0, 0)
}

# Test vector sum function
testVec1 = [1, 2, 3, 4, 5]
assert_eq(vectorSum(testVec1), 15, "sum of [1,2,3,4,5] should be 15")

testVec2 = [10, -5, 3]
assert_eq(vectorSum(testVec2), 8, "sum of [10,-5,3] should be 8")

emptyVec = []
# Note: This might fail if empty vectors aren't handled properly
# assert_eq(vectorSum(emptyVec), 0, "sum of empty vector should be 0")

"✓ Vector sum function tests passed"

# [4] Testing Mathematical Utilities
# ---------------------------------
# Test absolute value function
testAbs = |x| if(x < 0) -x else x

assert_eq(testAbs(5), 5, "abs(5) should be 5")
assert_eq(testAbs(-3), 3, "abs(-3) should be 3")
assert_eq(testAbs(0), 0, "abs(0) should be 0")

"✓ Absolute value tests passed"

# Test max of two numbers
max2 = |a, b| if(a > b) a else b

assert_eq(max2(5, 3), 5, "max(5,3) should be 5")
assert_eq(max2(-2, -8), -2, "max(-2,-8) should be -2")
assert_eq(max2(7, 7), 7, "max(7,7) should be 7")

"✓ Max function tests passed"

# [5] Testing Comparison Functions
# ------------------------------
# Test range checking
inRange = |value, min, max| (value >= min) & (value <= max)

assert_eq(inRange(5, 1, 10), true, "5 should be in range [1,10]")
assert_eq(inRange(15, 1, 10), false, "15 should not be in range [1,10]")
assert_eq(inRange(1, 1, 10), true, "1 should be in range [1,10] (boundary)")
assert_eq(inRange(10, 1, 10), true, "10 should be in range [1,10] (boundary)")

"✓ Range checking tests passed"

# [6] Testing Edge Cases and Error Conditions
# ------------------------------------------
# Test division by zero handling with try_or
safeDivide = |a, b| try_or(|| a / b, "undefined")

result1 = safeDivide(10, 2)
assert_eq(result1, 5, "10/2 should be 5")

result2 = safeDivide(10, 0)
assert_eq(result2, "undefined", "10/0 should return 'undefined'")

"✓ Safe division tests passed"

# [7] Testing Boolean Logic Functions
# ----------------------------------
# Test XOR function
xor = |a, b| (a | b) & !(a & b)

assert_eq(xor(true, false), true, "true XOR false should be true")
assert_eq(xor(false, true), true, "false XOR true should be true")
assert_eq(xor(true, true), false, "true XOR true should be false")
assert_eq(xor(false, false), false, "false XOR false should be false")

"✓ XOR function tests passed"

# [8] Testing Numerical Precision
# ------------------------------
# Test floating point operations (with tolerance)
pi_approximation = 22 / 7
pi_difference = abs(pi_approximation - pi)

# Check that the approximation is reasonably close
assert_lt(pi_difference, 0.01, "22/7 should be close to pi")

"✓ Pi approximation tests passed"

# [9] Testing String Operations
# ----------------------------
# Test string comparisons
greeting = "Hello"
assert_eq(greeting, "Hello", "String should match exactly")
assert_neq(greeting, "hello", "String comparison should be case sensitive")
assert_neq(greeting, "World", "Different strings should not be equal")

"✓ String comparison tests passed"

# [10] Performance and Stress Testing
# ----------------------------------
# Test that functions work with larger inputs
largeFactorial = factorial(10)
assert_eq(largeFactorial, 3628800, "factorial(10) should be 3628800")

# Test vector operations with larger vectors
largeVec = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
assert_eq(len(largeVec), 10, "Large vector should have correct length")
assert_eq(first(largeVec), 1, "First element should be 1")
assert_eq(last(largeVec), 10, "Last element should be 10")

"✓ Performance tests passed"

# [11] Summary
# ----------
{
  print("====================================")
  print("All unit tests completed successfully!")
  print("Total test categories: 11")
  print("====================================")
  "Test summary complete"
}

# Test summary function
runTestSuite = || {
  local testCount = 0
  local passedTests = 0
  
  # This would ideally be a more sophisticated test runner
  # For now, we just return a summary
  "Test suite completed: All assertions passed"
}

summary = runTestSuite()
summary
