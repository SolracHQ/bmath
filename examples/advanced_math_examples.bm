# Advanced Mathematical Functions Examples
# ======================================
# This file demonstrates advanced mathematical functions in BMath language.

# [1] Exponential and Logarithmic Functions
# -------------------------------------
# Exponential function (e^x)
expValue1 = exp(1)                  # Expected: ~2.718 (e¹)
expValue2 = exp(2)                  # Expected: ~7.389 (e²)
expValueNeg = exp(-1)               # Expected: ~0.368 (e⁻¹)

# Natural logarithm (base e)
# Since BMath uses log(value, base), we use e as the base
lnValue = log(10, e)                # Expected: ~2.303 (ln(10))

# Logarithm with different bases
log10Value = log(100, 10)           # Expected: 2.0 (log₁₀(100))
log2Value = log(32, 2)              # Expected: 5.0 (log₂(32))

# [2] Exponential Growth and Decay
# -----------------------------
# Calculate exponential growth: A = P * e^(rt)
calculateGrowth = |principal, rate, time| principal * exp(rate * time)

# Example: $1000 invested at 5% annual interest for 10 years
investment = calculateGrowth(1000, 0.05, 10)  # Expected: ~1648.72

# Calculate half-life decay: A = A₀ * e^(-λt)
calculateDecay = |initial, decayConst, time| initial * exp(-decayConst * time)

# Example: Substance with half-life of 5 years after 10 years
halfLifeConstant = log(2, e) / 5    # λ = ln(2)/half-life
decayResult = calculateDecay(100, halfLifeConstant, 10)  # Expected: ~25.0

# [3] Complex Mathematical Functions
# ------------------------------
# Complex exponential
complexExp = exp(1 + 2i)            # Expected: complex result

# Complex logarithm
complexLog = log(1 + 2i, e)         # Expected: complex result

# [4] Working with Mathematical Constants
# -----------------------------------
# Calculate circumference of a circle
circumference = |radius| 2 * pi * radius
circle1 = circumference(5)          # Expected: ~31.4159

# Calculate area of a circle
area = |radius| pi * radius^2
circle2 = area(5)                  # Expected: ~78.5398

# [5] Numerical Methods
# -----------------
# Approximate the derivative of a function at a point
derivative = |f, x, h| (f(x + h) - f(x)) / h

# Example: Derivative of x^2 at x=3 (expected analytical result: 6)
sqFunc = |x| x^2
derivResult = derivative(sqFunc, 3, 0.0001)  # Expected: ~6.0

# Numerical integration (simple trapezoidal rule)
integrate = |f, a, b, steps| {
  h = (b - a) / steps
  local sum = (f(a) + f(b)) / 2
  local i = 1
  sum = seq(steps - 1, |i|f(a + i * h)) -> reduce(sum, |acc, x| acc + x)
  sum * h
}

# Example: Integrate x^2 from 0 to 1 (expected analytical result: 1/3)
intResult = integrate(sqFunc, 0, 1, 100000)  # Expected: ~0.333

# [6] Statistical Functions
# ----------------------
# Calculate mean of a vector
mean = |values| values->sum / values->len
meanExample = mean([2, 4, 6, 8, 10])  # Expected: 6.0

# Calculate variance
variance = |values| {
  m = mean(values)
  squaredDiffs = values->map(|x| (x - m)^2)
  mean(squaredDiffs)
}
varianceExample = variance([2, 4, 6, 8, 10])  # Expected: 8.0

# Calculate standard deviation
stdDev = |values| sqrt(variance(values))
stdDevExample = stdDev([2, 4, 6, 8, 10])  # Expected: ~2.83

# [7] Combinatorial Functions
# ------------------------
# Factorial function
factorial = |n| if(n <= 1) 1 else n * factorial(n - 1)

# Binomial coefficient (n choose k)
binomial = |n, k| factorial(n) / (factorial(k) * factorial(n - k))
binomialExample = binomial(7, 3)  # Expected: 35

# [8] Working with Vectors in Advanced Math
# --------------------------------------
# Calculate the magnitude (length) of a vector
magnitude = |vector| sqrt(vector->map(|x| x^2)->reduce(0, |a, b| a + b))
magExample = magnitude([3, 4])  # Expected: 5.0

# Normalize a vector (make it unit length)
normalize = |vector| {
  mag = magnitude(vector)
  vector->map(|x| x / mag)
}
normExample = normalize([3, 4])  # Expected: [0.6, 0.8]
